///
///  @file    commands.h
///  @brief   Data tables used in executing command strings.
///
%s
///
///  @copyright 2020 Franklin P. Johnston / Nowwith Treble Software
///
///  Permission is hereby granted, free of charge, to any person obtaining a
///  copy of this software and associated documentation files (the "Software"),
///  to deal in the Software without restriction, including without limitation
///  the rights to use, copy, modify, merge, publish, distribute, sublicense,
///  and/or sell copies of the Software, and to permit persons to whom the
///  Software is furnished to do so, subject to the following conditions:
///
///  The above copyright notice and this permission notice shall be included in
///  all copies or substantial portions of the Software.
///
///  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
///  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
///  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
///  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIA-
///  BILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
///  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
///  THE SOFTWARE.
///
////////////////////////////////////////////////////////////////////////////////

// Command table definitions

///  @typedef exec_func
///  @brief   Function to execute command.

typedef void (exec_func)(struct cmd *cmd);

///  @enum   cmd_opts
///  @brief  Options defined for each command.

enum cmd_opts
{
    OPT_M  = 1,                     ///< m argument allowed
    OPT_N  = 1 << 1,                ///< n argument allowed
    OPT_F  = 1 << 2,                ///< Flag argument
    OPT_C  = 1 << 3,                ///< : modifier allowed
    OPT_D  = 1 << 4,                ///< :: modifier allowed
    OPT_A  = 1 << 5,                ///< @ modifier allowed
    OPT_Q  = 1 << 6,                ///< Q-register required
    OPT_T1 = 1 << 7,                ///< 1 text argument allowed
    OPT_T2 = 1 << 8,                ///< 2 text arguments allowed
    OPT_O  = 1 << 9,                ///< Operator or operand
    OPT_E  = 1 << 10                ///< "ESCape"-like command
};

///  @struct cmd_table
///
///  @brief  Format of command tables used to parse and execute commands.

struct cmd_table
{
    exec_func *exec;                ///< Execution function
    enum cmd_opts opts;             ///< Command options

#if     defined(TECO_TRACE)

    const char *name;               ///< Command function name

#endif

};

///
///  @var    cmd_table
///
///  @brief  Dispatch table, defining functions to scan execute input
///          characters, as well as the options for each command.
///

/// @def    ENTRY(chr, func, opts)
/// @brief  Defines entries in command table.

#if     defined(TECO_TRACE)

#define ENTRY(chr, func, opts) [chr] = { func, (opts), #func }

#else

#define ENTRY(chr, func, opts) [chr] = { func, (opts) }

#endif

static const struct cmd_table cmd_table[] =
{
%s
};

static const uint cmd_max = countof(cmd_table); ///< Maximum command


///  @var    e_table
///  @brief  Table for all commands starting with E.

static const struct cmd_table e_table[] =
{
%s
};

static const uint e_max = countof(e_table); ///< Maximum E command


///  @var    f_table
///  @brief  Table for all commands starting with F.

static const struct cmd_table f_table[] =
{
%s
};

static const uint f_max = countof(f_table); ///< Maximum F command
