///
///  @file    exec.h
///  @brief   Header file for parsing and executing TECO commands.
///
%s
///
///  @copyright 2019-2020 Franklin P. Johnston / Nowwith Treble Software
///
///  Permission is hereby granted, free of charge, to any person obtaining a
///  copy of this software and associated documentation files (the "Software"),
///  to deal in the Software without restriction, including without limitation
///  the rights to use, copy, modify, merge, publish, distribute, sublicense,
///  and/or sell copies of the Software, and to permit persons to whom the
///  Software is furnished to do so, subject to the following conditions:
///
///  The above copyright notice and this permission notice shall be included in
///  all copies or substantial portions of the Software.
///
///  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
///  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
///  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
///  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIA-
///  BILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
///  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
///  THE SOFTWARE.
///
////////////////////////////////////////////////////////////////////////////////

#if     !defined(_EXEC_H)

#define _EXEC_H

#include "teco.h"               //lint !e451 !e537

///  @struct cmd
///  @brief  Command block structure.

struct cmd
{
    char c1;                        ///< 1st command character
    char c2;                        ///< 2nd command character (or NUL)
    char c3;                        ///< 3rd command character (or NUL)
    char qname;                     ///< Q-register name
    int_t m_arg;                    ///< m argument
    int_t n_arg;                    ///< n argument
    bool qlocal;                    ///< If true, Q-register is local
    bool m_set;                     ///< m argument is valid
    bool n_set;                     ///< n argument is valid
    bool h;                         ///< H found
    bool ctrl_y;                    ///< CTRL/Y found
    bool w;                         ///< W found
    bool colon;                     ///< : found
    bool dcolon;                    ///< :: found
    bool atsign;                    ///< @ found
    char delim;                     ///< Delimiter for @ modifier
    struct tstring text1;           ///< 1st text string
    struct tstring text2;           ///< 2nd text string
};

// Global variables

extern char eg_command[];

extern char *eg_result;

extern uint nparens;

#if     defined(TECO_DISPLAY)

extern const struct cmd null_cmd;

#endif

// Functions that directly execute commands

%s

// Helper functions for executing commands

extern bool append(bool n_set, int_t n_arg, bool colon_set);

extern bool append_line(void);

extern void check_args(struct cmd *cmd);

extern int check_EI(void);

extern bool check_semi(void);

extern void close_files(void);

extern void exec_cmd(struct cmd *cmd);

extern void exec_macro(struct buffer *macro, struct cmd *cmd);

extern void exit_EG(void);

extern void exec_insert(const char *buf, uint len);

extern bool exec_xoper(int c);

extern int find_eg(char *buf, bool reset);

extern void init_EG(void);

extern void init_EI(void);

extern void init_loop(void);

extern bool next_page(int start, int end, bool ff, bool yank);

extern bool next_yank(void);

extern int read_indirect(void);

extern void reset_if(void);

extern void reset_indirect(void);

extern void reset_loop(void);

extern bool skip_cmd(struct cmd *cmd, const char *skip);

#endif  // !defined(_EXEC_H)
